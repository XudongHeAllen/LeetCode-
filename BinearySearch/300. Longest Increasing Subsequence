Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:

Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
Note:

There may be more than one LIS combination, it is only necessary for you to return the length.
Your algorithm should run in O(n2) complexity.
Follow up: Could you improve it to O(n log n) time complexity?


The idea is creat a table
if nums[n] < num[n-1]
use n-1 take the place of n

class Solution {
    public int lengthOfLIS(int[] nums) {
        if(nums==null) return 0;
        final int LEN = nums.length;
        if(LEN <= 1) return LEN;
        int[] dp = new int[LEN];
        dp[0] = nums[0];
        int maxLen = 0;
        for(int i=1; i<LEN; i++) {
            int num = nums[i];
            if(num > dp[maxLen]) {
                maxLen++;
                dp[maxLen] = num;
            } else {
                int index = Arrays.binarySearch(dp, 0, maxLen, num);
                if(index < 0) {
                    index = -index-1;
                    dp[index] = num;
                }
            }
        }
        return maxLen+1;
    }
}
