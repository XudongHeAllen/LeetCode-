Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int low = 0, high = nums.length -1;
        int first = -1, last = -1;
        boolean is_find = false;
        while(low + 1 < high){
            int mid = low + (high-low)/2;
            if(nums[mid] == target){
                first = mid;
                last = mid;
                while(first > 0 && nums[first] == nums[first-1])
                    first--;
                while(last < nums.length-1 && nums[last] == nums[last+1])
                    last++;
                is_find = true;
                break;
            }else if(nums[mid] < target)
                low = mid;
            else 
                high = mid;
        }
         if(is_find || nums.length == 0)
        return new int[]{first,last};
    
    while(low < high && nums[low] != target)
        low++;
    while(low < high && nums[high] != target)
        high--;
    if(nums[low] == target)
        return new int[]{low,high};
    return new int[]{first, last};
    }
   
}
